[cli]
apps = list: pkg_cli, log_cli, config_cli, override_cli, list_actions_cli,
    fac_res_app, fac_info_app, fac_model_app, fac_nlp_model_app, app
cleanups = list: pkg_cli, log_cli, config_cli, override_cli, list_actions_cli,
    fac_res_app, fac_info_app, fac_model_app, fac_nlp_model_app, app, cli, package, config_import

[log_cli]
class_name = zensols.cli.LogConfigurator
log_name = ${package:name}
format = %%(asctime)s[%%(levelname)s]:%%(name)s %%(message)s

[pkg_cli]
class_name = zensols.cli.PackageInfoImporter

[config_cli]
class_name = zensols.cli.ConfigurationImporter
type = import
section = config_import

[override_cli]
class_name = zensols.cli.ConfigurationOverrider

[list_actions_cli]
class_name = zensols.cli.ListActions

[config_import]
sections = list: config_imp
references = list: app, package

[config_imp]
type = importini
config_files = list:
    ^{config_path},
    resource(zensols.deeplearn): resources/default.conf,
    resource(zensols.deepnlp): resources/default.conf,
    resource(sidmodel): resources/default.conf,
    ^{config_path},
    resource(sidmodel): resources/obj.conf,
    ^{config_path}

[fac_info_app]
class_name = zensols.deeplearn.cli.FacadeInfoApplication

[fac_res_app]
class_name = zensols.deeplearn.cli.FacadeResultApplication

[fac_model_app]
class_name = zensols.deeplearn.cli.FacadeModelApplication

[fac_nlp_model_app]
class_name = zensols.deepnlp.cli.NLPSequenceClassifyFacadeModelApplication

[app]
class_name = sidmodel.Application
cleaner = instance: cleaner
mimic_notes_extractor = instance: mimic_notes_extractor
result_analyzer = instance: result_analyzer
emb_analyzer = instance: embedded_analyzer
config_factory_args = dict: {'reload_pattern': '^sidmodel'}
hyperparam_desc_file = resource(sidmodel): resources/hyperparams.csv
